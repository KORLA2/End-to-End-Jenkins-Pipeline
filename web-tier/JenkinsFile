pipeline {
    agent any
    environment {
        DOCKER_HUB_CRED = 'docker-cred'
        GIT_HUB_CRED = 'githubtoken'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Git Checkout') {
            steps {
                git credentialsId: GIT_HUB_CRED, url: 'https://github.com/KORLA2/End-to-End-Jenkins-Pipeline.git', branch: 'main'
            }
        }

        stage('Determine Changes') {
            steps {
                script {
                    def changes = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim()
                    echo "Detected changes: ${changes}"

                    if (changes.contains('web-tier/')) {
                        currentBuild.description = 'Frontend changes detected'
                        env.FRONTEND_CHANGED = 'true'
                    } else {
                        echo 'No relevant Frontend changes detected.'
                        env.FRONTEND_CHANGED = 'false'
                    }
                }
            }
        }

        stage('Build and Deploy') {
            when {
                expression {
                    return env.FRONTEND_CHANGED == 'true'
                }
            }
            stages {
                stage('Build Image') {
                    steps {
                        dir('web-tier') {
                            sh "docker build -t goutham2/frontend:${BUILD_NUMBER} ."
                        }
                    }
                }

                stage('Push Image') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CRED, passwordVariable: 'pass', usernameVariable: 'user')]) {
                            sh "docker login -u $user --password $pass"
                            sh "docker push goutham2/frontend:${BUILD_NUMBER}"
                        }
                    }
                }

                stage('Delete Image') {
                    steps {
                        sh "docker rmi goutham2/frontend:${BUILD_NUMBER}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after the pipeline execution
        }
    }
}

